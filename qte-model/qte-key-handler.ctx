\chapter{QT/E 3.1.2 keyboard handler class}

\section{keyboard handler class 簡介}
在 \verb+$QTDIR/src/embedded+ 目錄下有些檔案是有關 keybaord handler class 的。
以 pc 101 key 鍵盤來說明。

\begin{longtable}{p{4.5cm}p{8.5cm}}
\toprule
\verb+qkbd_qws.h+,\par
\verb+qkbd_qws.cpp+ & 提供 QWSKeyboardHandler class, 是所有的 keyboard handler 的 base class\\
\midrule
\verb+qkbdpc101_qws.h+,\par
\verb+qkbdpc101_qws.cpp+ & QWSPC101KeyboardHandler, 這是用來處理 pc 101 key 鍵盤 的class,
以 scancode (not keycode) 的方式來讀取鍵盤。\\
\midrule
\verb+qkbdtty_qws.h+,\par
\verb+qkbdtty_qws.cpp+ & QWSTtyKeyboardHandler 開啟 tty 裝置檔案, 將讀取 tty 的值交給 QWSPC101KeyboardHandler 來處理。\\
\bottomrule
\end{longtable}

圖 \ref{tty_keyboard_h} (page \pageref{tty_keyboard_h}) 為 tty keyboard
的繼承階層。

\begin{figure}[htbp]
\center
\includegraphics[scale=0.25]{eps/tty_keyboard.eps}
\caption{tty keyboard class diagram}\label{tty_keyboard_h}
\end{figure}

以下為 qkbd\_{}qws.h, qkbd\_{}qws.cpp 的原始碼:
\lstset{moredelim=[is][\color{blue}]{/|}{|/}}
\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,caption=\$QTDIR/src/embedded/qkbd\_{}qws.h,escapeinside={/*@}{@*/},label=qkbd_qws.h]
#ifndef QKBD_QWS_H
#define QKBD_QWS_H

#include "qapplication.h"

#ifndef QT_NO_QWS_KEYBOARD

class QWSKbPrivate;

class QWSKeyboardHandler
{
 public:
  QWSKeyboardHandler();
  virtual ~QWSKeyboardHandler();
/*@\label{processKeyEvent}@*/  virtual void processKeyEvent(int unicode, int keycode, int modifiers,bool isPress, bool autoRepeat);

 protected:
  int transformDirKey( int key );
  void beginAutoRepeat( int uni, int code, int mod );
  void endAutoRepeat();

 private:
  /|QWSKbPrivate *d;|/
};

#endif // QT_NO_QWS_KEYBOARD

#endif // QKBD_QWS_H
\end{lstlisting}

\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=\$QTDIR/src/embedded/qkbd\_{}qws.cpp]
#include "qkbd_qws.h"

#ifndef QT_NO_QWS_KEYBOARD

#include "qwindowsystem_qws.h"
#include "qgfx_qws.h"
#include "qtimer.h"
#include <stdlib.h>


class QWSKbPrivate : public QObject
{
 Q_OBJECT
 public:
  QWSKbPrivate( QWSKeyboardHandler *h ) 
  {
   handler = h;
   arTimer = new QTimer( this );
   connect( arTimer, SIGNAL(timeout()), SLOT(autoRepeat()) );
   repeatdelay = 400;
   repeatperiod = 80;
  }

  void beginAutoRepeat( int uni, int code, int mod ) 
  {
   unicode = uni;
   keycode = code;
   modifier = mod;
   arTimer->start( repeatdelay, TRUE );
  }
  void endAutoRepeat() 
  {
   arTimer->stop();
  }

 private slots:
  void autoRepeat() 
  {
   handler->processKeyEvent( unicode, keycode, modifier, FALSE, TRUE );
   handler->processKeyEvent( unicode, keycode, modifier, TRUE, TRUE );
   arTimer->start( repeatperiod, TRUE );
  }

 private:
  /|QWSKeyboardHandler *handler;|/
  int unicode;
  int keycode;
  int modifier;
  int repeatdelay;
  int repeatperiod;
  QTimer *arTimer;
};


QWSKeyboardHandler::QWSKeyboardHandler()
{
    d = new QWSKbPrivate( this );
}

QWSKeyboardHandler::~QWSKeyboardHandler()
{
    delete d;
}


void QWSKeyboardHandler::processKeyEvent(int unicode, int keycode, int modifiers,
			bool isPress, bool autoRepeat)
{
    qwsServer->processKeyEvent( unicode, keycode, modifiers, isPress, autoRepeat );
}

int QWSKeyboardHandler::transformDirKey(int key)
{
    static int dir_keyrot = -1;
    if (dir_keyrot < 0) {
	// get the rotation
	char *kerot = getenv("QWS_CURSOR_ROTATION");
	if (kerot) {
	    if (strcmp(kerot, "90") == 0)
		dir_keyrot = 1;
	    else if (strcmp(kerot, "180") == 0)
		dir_keyrot = 2;
	    else if (strcmp(kerot, "270") == 0)
		dir_keyrot = 3;
	    else
		dir_keyrot = 0;
	} else {
	    dir_keyrot = 0;
	}
    }
    int xf = qt_screen->transformOrientation() + dir_keyrot;
    return (key-Qt::Key_Left+xf)%4+Qt::Key_Left;
}

void QWSKeyboardHandler::beginAutoRepeat( int uni, int code, int mod )
{
    d->beginAutoRepeat( uni, code, mod );
}

void QWSKeyboardHandler::endAutoRepeat()
{
    d->endAutoRepeat();
}

#include "qkbd_qws.moc"

#endif // QT_NO_QWS_KEYBOARD
\end{lstlisting}

\section{產生 keyboard handler class }

有了 keyboard handler 之後, 如何讓 QT/E 產生這個 keyboard handler 呢？
QKbdDriverFactory class 便是用來做這件事, 其檔案在
\$QTDIR/src/embedded/qkbddriverfactory\_{}qws.h,
\$QTDIR/src/embedded/qkbddriverfactory\_{}qws.cpp。
其中有一個 create 的 member function, 便是用來產生一個 keyboard handler class,
其原始碼如下。
\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=\$QTDIR/src/embedded/qkbddriverfactory\_{}qws.cpp]
QWSKeyboardHandler *QKbdDriverFactory::create( const QString& key, const QString& device )
{
    QString driver = key.lower();
#ifdef Q_OS_QNX6
    if ( driver == "qnx" || driver.isEmpty() )
	return new QWSQnxKeyboardHandler( device );
#endif
#ifdef QT_QWS_SHARP
    if ( driver == "sl5000" || driver.isEmpty() )
	return new QWSSL5000KeyboardHandler( device );
#endif
#ifdef QT_QWS_YOPY
    if ( driver == "yopy" || driver.isEmpty() )
	return new QWSYopyKeyboardHandler( device );
#endif
#ifdef QT_QWS_CASSIOPEIA
    if ( driver == "vr41xx" || driver.isEmpty() )
	return new QWSVr41xxKeyboardHandler( device );
#endif
#ifndef QT_NO_QWS_KEYBOARD
# ifndef QT_NO_QWS_KBDTTY
    if ( driver =="tty" || driver.isEmpty() )
	return new QWSTtyKeyboardHandler( device );
# endif
# ifndef QT_NO_QWS_KBDUSB
    if ( driver == "usb" )
	return new QWSUsbKeyboardHandler( device );
# endif
#endif

#if !defined(Q_OS_WIN32) || defined(QT_MAKEDLL)
#ifndef QT_NO_COMPONENT
    if ( !instance )
	instance = new QKbdDriverFactoryPrivate;

    QInterfacePtr<QKbdDriverInterface> iface;
    QKbdDriverFactoryPrivate::manager->queryInterface( driver, &iface );

    if ( iface )
	return iface->create( driver, driver );
#endif
#endif
    return 0;
}
\end{lstlisting}

而誰來呼叫 QKbdDriverFactory::create() 呢？
答案在 \$QTDIR/src/src/kernel/qwindowsystem\_{}qws.cpp。
以下為 \$QTDIR/src/src/kernel/qwindowsystem\_{}qws.cpp 片段原始碼。

void QWSServer::openKeyboard() 會呼叫  QKbdDriverFactory::create()。

\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=\$QTDIR/src/src/kernel/qwindowsystem\_{}qws.cpp,escapeinside={/*@}{@*/}]

/*@\label{defaultKeyboard}@*/static const char *defaultKeyboard = "TTY";

/*!
    Opens the keyboard device(s).
*/
void QWSServer::openKeyboard()
{
 /*@\label{getenv_QWS_KEYBOARD}@*/QString keyboards = getenv("QWS_KEYBOARD");
 if ( keyboards.isEmpty() ) 
 {
  #if defined( QT_QWS_CASSIOPEIA )
   keyboards = "Buttons";
  #endif
  if ( keyboards.isEmpty() ) 
  {
   keyboards = defaultKeyboard;	// last resort
  }
 }
 closeKeyboard();
 if ( keyboards == "None" )
  return;
 QString device;
 QString type;
 #ifndef QT_NO_STRINGLIST
  QStringList keyboard = QStringList::split(" ",keyboards);
  for (QStringList::Iterator k=keyboard.begin(); k!=keyboard.end(); ++k) 
  {
   QString spec = *k;
   int colon=spec.find(':');
   if ( colon>=0 ) 
   {
    type = spec.left(colon-1);
    device = spec.mid(colon);
   }
   else 
   {
    type = spec;
   }
/|/*@\label{code:create1} @*/ QWSKeyboardHandler* kh = QKbdDriverFactory::create(type, device); |/
   keyboardhandlers.append(kh);
  }
 #else
  int colon=keyboards.find(':');
  if ( colon>=0 ) 
  {
   type = keyboards.left(colon-1);
   device = keyboards.mid(colon);
  } 
  else 
  {
   type = keyboards;
  }
/|/*@\label{code:create2} @*/ QWSKeyboardHandler* kh = QKbdDriverFactory::create(type, device); //assume only one|/
    keyboardhandlers.append(kh);
#endif
}
\end{lstlisting}

\ref{code:create1}, \ref{code:create2} 行便是呼叫了 QKbdDriverFactory::create()
來產生 keyboard handler class。
第 \ref{getenv_QWS_KEYBOARD} 行會先抓取環境變數 \verb+QWS_KEYBOARD+,
若 \verb+QWS_KEYBOARD+ 是空的, 便會使用預設的 keyboard name, 第
\ref{defaultKeyboard} 行定義的 TTY。

\section{如何撰寫一個 keyboard handler class}
在 \$QTDIR/src/embedded/ 有許多的 keyboard handler class,
參閱表 \ref{khc}, page \pageref{khc}, 這些是 QT/E 3.1.2 裡已經包含的。

\begin{table}[htbp]
\center
\begin{tabular}{ll}
\toprule
\verb+qkbdvr41xx_qws.h+ &
\verb+qkbdvr41xx_qws.cpp+\\
\midrule
\verb+qkbdsl5000_qws.h+ &
\verb+qkbdsl5000_qws.cpp+\\
\midrule
\verb+qkbdyopy_qws.h+ &
\verb+qkbdyopy_qws.cpp+\\
\midrule
\verb+qkbdtty_qws.cpp+ & 
\verb+qkbdtty_qws.h+\\
\bottomrule
\end{tabular}
\caption{\$QTDIR/src/embedded/ 目錄下的 keyboard handler class}\label{khc}
\end{table}


從其檔案名稱可以很容易的知道這是哪一個平台的 keyboard handler class。
我們可以從這些檔案中的其中一個來參考它們的寫法, 以便完成自己的
keyboard handler class。

以下以 \verb+qkbdvr41xx_qws.h+, \verb+qkbdvr41xx_qws.cpp+ 來說明。
先看看  \verb+qkbdvr41xx_qws.h+ 的原始碼：

\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=\$QTDIR/src/embedded/qkbdvr41xx\_{}qws.h,escapeinside={/*@}{@*/}]
/|/*@\label{classname}@*/class QWSVr41xxKeyboardHandler : public QWSKeyboardHandler|/
{
 public:
  QWSVr41xxKeyboardHandler(const QString&);
  virtual ~QWSVr41xxKeyboardHandler();
 private:
/| /*@\label{classprivate}@*/ QWSVr41xxKbPrivate *d;|/
};
\end{lstlisting}

重點在 \ref{classname}, \ref{classprivate} 行, QWSVr41xxKeyboardHandler
必須繼承 QWSKeyboardHandler 這個 base class, 以及第 \ref{classprivate} 
行的 QWSVr41xxKbPrivate。圖 \ref{F_QWSVr41xxKeyboardHandler},
page \pageref{F_QWSVr41xxKeyboardHandler} 為其繼承類別圖。


\begin{figure}[htbp]
\center
\includegraphics[scale=0.25]{eps/QWSVr41xxKeyboardHandler.eps}
\caption{QWSVr41xxKeyboardHandler hierarchy}\label{F_QWSVr41xxKeyboardHandler}
\end{figure}

\noindent
QWSVr41xxKbPrivate 定義在 \verb+qkbdvr41xx_qws.cpp+, 讓我們看看  \verb+qkbdvr41xx_qws.cpp+:

\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=\$QTDIR/src/embedded/qkbdvr41xx\_{}qws.cpp,escapeinside={/*@}{@*/}]
#include "qkbdvr41xx_qws.h"

#ifdef QT_QWS_CASSIOPEIA

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <errno.h>

#include <qsocketnotifier.h>

class QWSVr41xxKbPrivate : public QObject
{
    Q_OBJECT
public:
    QWSVr41xxKbPrivate( QWSVr41xxKeyboardHandler *h, const QString& );
    virtual ~QWSVr41xxKbPrivate();

    bool isOpen() { return buttonFD > 0; }

private slots:
    void readKeyboardData();

private:
    QString terminalName;
    int buttonFD;
    int kbdIdx;
    int kbdBufferLen;
    unsigned char *kbdBuffer;
    QSocketNotifier *notifier;
    QWSVr41xxKeyboardHandler *handler;
};

QWSVr41xxKeyboardHandler::QWSVr41xxKeyboardHandler(const QString &device)
{
    d = new QWSVr41xxKbPrivate( this, device );
}

QWSVr41xxKeyboardHandler::~QWSVr41xxKeyboardHandler()
{
    delete d;
}

QWSVr41xxKbPrivate::QWSVr41xxKbPrivate( QWSVr41xxKeyboardHandler *h, const QString &device ) : handler(h)
{
    terminalName = device.isEmpty()?"/dev/buttons":device.latin1();
    buttonFD = -1;
    notifier = 0;

    if ((buttonFD = open(terminalName, O_RDWR | O_NDELAY, 0)) < 0)
    {
	qWarning("Cannot open %s\n", terminalName.latin1());
    }

    if ( buttonFD >= 0 ) {
	notifier = new QSocketNotifier( buttonFD, QSocketNotifier::Read, this );
	connect( notifier, SIGNAL(activated(int)),this,
		SLOT(readKeyboardData()) );
    }

    kbdBufferLen = 80;
    kbdBuffer = new unsigned char [kbdBufferLen];
    kbdIdx = 0;
}

QWSVr41xxKbPrivate::~QWSVr41xxKbPrivate()
{
    if ( buttonFD > 0 ) {
	::close( buttonFD );
	buttonFD = -1;
    }
    delete notifier;
    notifier = 0;
    delete [] kbdBuffer;
}

void QWSVr41xxKbPrivate::readKeyboardData()
{
    int n = 0;
    do {
	n  = read(buttonFD, kbdBuffer+kbdIdx, kbdBufferLen - kbdIdx );
	if ( n > 0 )
	    kbdIdx += n;
    } while ( n > 0 );

    int idx = 0;
    while ( kbdIdx - idx >= 2 ) {
	unsigned char *next = kbdBuffer + idx;
	unsigned short *code = (unsigned short *)next;
	int keycode = Qt::Key_unknown;
	switch ( (*code) & 0x0fff ) {
	    case 0x7:
		keycode = Qt::Key_Up;
		break;
	    case 0x9:
		keycode = Qt::Key_Right;
		break;
	    case 0x8:
		keycode = Qt::Key_Down;
		break;
	    case 0xa:
		keycode = Qt::Key_Left;
		break;
	    case 0x3:
		keycode = Qt::Key_Up;
		break;
	    case 0x4:
		keycode = Qt::Key_Down;
		break;
	    case 0x1:
		keycode = Qt::Key_Return;
		break;
	    case 0x2:
		keycode = Qt::Key_F4;
		break;
	    default:
		qDebug("Unrecognised key sequence %d", (int)code );
	}
	if ( (*code) & 0x8000 )
	    handler->processKeyEvent( 0, keycode, 0, FALSE, FALSE );
	else
	    handler->processKeyEvent( 0, keycode, 0, TRUE, FALSE );
	idx += 2;
    }

    int surplus = kbdIdx - idx;
    for ( int i = 0; i < surplus; i++ )
	kbdBuffer[i] = kbdBuffer[idx+i];
    kbdIdx = surplus;
}

#include "qkbdvr41xx_qws.moc"

#endif // QT_QWS_CASSIOPEIA
\end{lstlisting}

最主要的讀取鍵盤裝置的工作是由 QWSVr41xxKbPrivate class 做的,
Vr41xxKeyboardHandler class 只是用來產生 QWSVr41xxKbPrivate class 的實體。

\subsection*{QWSVr41xxKbPrivate::QWSVr41xxKbPrivate()}
這個 constructor 是用來 open 裝置檔案, 以及連結 signal, slot。 
使得有按鍵被按下時去執行
void QWSVr41xxKbPrivate::readKeyboardData()
\subsection*{QWSVr41xxKbPrivate::~QWSVr41xxKbPrivate()}
 這個 destructor 是用來 close 裝置檔。
\subsection*{void QWSVr41xxKbPrivate::readKeyboardData()}
 此 member function 便是用來讀取裝置檔。

\bigskip
在 void QWSVr41xxKbPrivate::readKeyboardData() 要判斷所讀到的按鍵值以及其狀態,
是 release 還是 press, 再來便是指定一個 QT 事先定義好的按鍵值,
參閱 \$QTDIR/src/kernel/qnamespace.h。 裡頭定義了好幾個按鍵值,
選擇所要的即可。 再來便是要呼叫 QWSKeyboardHandler::processKeyEvent(), 參閱
Listing \ref{qkbd_qws.h}, page \pageref{qkbd_qws.h}。

\subsection{開始撰寫自己的 keyboard handler class}
首先複製一份程式碼:

\begin{verbatim}
cp qkbdvr41xx_qws.h qkbdcnct_qws.h
cp qkbdvr41xx_qws.cpp qkbdcnct_qws.cpp
\end{verbatim}

再修改 \verb+qkbdcnct_qws.h+, \verb+qkbdcnct_qws.cpp+ 成自己的 keyboard handler
class。


% 這裡用 lstinputlisting 直接接檔案內容引入
\lstinputlisting[basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=\$QTDIR/src/embedded/qkbdcnct\_{}qws.h]{qkbdcnct_qws.h}

\lstinputlisting[basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=\$QTDIR/src/embedded/qkbdcnct\_{}qws.cpp]{qkbdcnct_qws.cpp}

% 這裡用 lstinputlisting 直接接檔案內容引入, 到這裡結束

圖 \ref{QWSCnctKeyboardHandler}, page \pageref{QWSCnctKeyboardHandler}
為其繼承類別圖。

\begin{figure}[htbp]
\center
\includegraphics[scale=0.25]{eps/QWSCnctKeyboardHandler.eps}
\caption{QWSCnctKeyboardHandler}\label{QWSCnctKeyboardHandler}
\end{figure}

最主要是在 void QWSCnctKbPrivate::readKeyboardData() member function
中將讀到的值轉成 QT/E 可以認得的方式。

再來便是修改 \$QTDIR/src/embedded/qkbddriverfactory\_{}qws.cpp 中的
QWSKeyboardHandler *QKbdDriverFactory::create( const QString\& key, const QString\& device ), 讓此 member function 可以產生我們剛完成的 keyboard handler class。

\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,caption=修改過的\$QTDIR/src/embedded/qkbddriverfactory\_{}qws.cpp,label=qkbddriverfactory_qws.cpp,escapeinside={/*@}{@*/}]
QWSKeyboardHandler *QKbdDriverFactory::create( const QString& key, const QString& device )
{
    QString driver = key.lower();

/|/*@\label{QT_QWS_CNCT}@*/#ifdef QT_QWS_CNCT|/
/|/*@\label{if}@*/    if ( driver == "cnct" || driver.isEmpty() )|/
/|/*@\label{lp}@*/    {|/
/|/*@\label{qdebug}@*/     qDebug("new QWSCnctKeyboardHandler( device )");|/
/|/*@\label{return}@*/     return new QWSCnctKeyboardHandler( device );|/
/|/*@\label{rp}@*/    }|/
/|/*@\label{END_QT_QWS_CNCT}@*/#endif|/

#ifdef Q_OS_QNX6
    if ( driver == "qnx" || driver.isEmpty() )
	return new QWSQnxKeyboardHandler( device );
#endif
#ifdef QT_QWS_SHARP
    if ( driver == "sl5000" || driver.isEmpty() )
	return new QWSSL5000KeyboardHandler( device );
#endif
#ifdef QT_QWS_YOPY
    if ( driver == "yopy" || driver.isEmpty() )
	return new QWSYopyKeyboardHandler( device );
#endif
#ifdef QT_QWS_CASSIOPEIA
    if ( driver == "vr41xx" || driver.isEmpty() )
	return new QWSVr41xxKeyboardHandler( device );
#endif
#ifndef QT_NO_QWS_KEYBOARD
# ifndef QT_NO_QWS_KBDTTY
    if ( driver =="tty" || driver.isEmpty() )
	return new QWSTtyKeyboardHandler( device );
# endif
# ifndef QT_NO_QWS_KBDUSB
    if ( driver == "usb" )
	return new QWSUsbKeyboardHandler( device );
# endif
#endif

#if !defined(Q_OS_WIN32) || defined(QT_MAKEDLL)
#ifndef QT_NO_COMPONENT
    if ( !instance )
	instance = new QKbdDriverFactoryPrivate;

    QInterfacePtr<QKbdDriverInterface> iface;
    QKbdDriverFactoryPrivate::manager->queryInterface( driver, &iface );

    if ( iface )
	return iface->create( driver, driver );
#endif
#endif
    return 0;
}
\end{lstlisting}

\ref{QT_QWS_CNCT},
\ref{if},
\ref{lp},
\ref{qdebug},
\ref{return},
\ref{rp},
\ref{END_QT_QWS_CNCT},
這幾行便是新加入的程式碼, 以便將  QWSCnctKeyboardHandler class 產生來。

接著要修改的是\$QTDIR/src/src/kernel/qwindowsystem\_{}qws.cpp:

\begin{lstlisting}[tabsize=1,basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,title=修改後的 \$QTDIR/src/src/kernel/qwindowsystem\_{}qws.cpp,escapeinside={/*@}{@*/}]

static const char *defaultKeyboard = "TTY";

/*!
    Opens the keyboard device(s).
*/
void QWSServer::openKeyboard()
{
 QString keyboards = getenv("QWS_KEYBOARD");
 if ( keyboards.isEmpty() ) 
 {
  #if defined( QT_QWS_CASSIOPEIA )
    keyboards = "Buttons";
  #endif
  /|#if defined( QT_QWS_CNCT )|/
/*@\label{cnct}@*/   /|keyboards = "cnct";|/
  /|#endif|/
  if ( keyboards.isEmpty() ) 
  {
   keyboards = defaultKeyboard;	// last resort
  }
 }
 closeKeyboard();
 if ( keyboards == "None" )
  return;
 QString device;
 QString type;
 #ifndef QT_NO_STRINGLIST
  QStringList keyboard = QStringList::split(" ",keyboards);
  for (QStringList::Iterator k=keyboard.begin(); k!=keyboard.end(); ++k) 
  {
   QString spec = *k;
   int colon=spec.find(':');
   if ( colon>=0 ) 
   {
    type = spec.left(colon-1);
    device = spec.mid(colon);
   }
   else 
   {
    type = spec;
   }
   QWSKeyboardHandler* kh = QKbdDriverFactory::create(type, device);
   keyboardhandlers.append(kh);
  }
 #else
  int colon=keyboards.find(':');
  if ( colon>=0 ) 
  {
   type = keyboards.left(colon-1);
   device = keyboards.mid(colon);
  } 
  else 
  {
   type = keyboards;
  }
  QWSKeyboardHandler* kh = QKbdDriverFactory::create(type, device); //assume only one
    keyboardhandlers.append(kh);
#endif
}
\end{lstlisting}

第 \ref{cnct} 行的 \verb+keyboards = "Buttons";+ 要和 Listing \ref{qkbddriverfactory_qws.cpp} (page \pageref{qkbddriverfactory_qws.cpp}) 第 \ref{if} 行的 
\verb+driver == "cnct"+ 一樣。
這個變數值會傳給 QKbdDriverFactory::create() 的第一個參數,
而在 QKbdDriverFactory::create() 裡會使用這個變數值來決定要產生那一種
keyboard handler class。 配合  Listing \ref{qkbddriverfactory_qws.cpp} (page \pageref{qkbddriverfactory_qws.cpp})
\ref{QT_QWS_CNCT},
\ref{if},
\ref{lp},
\ref{qdebug},
\ref{return},
\ref{rp},
\ref{END_QT_QWS_CNCT}, 這幾行看就清楚了。
從這幾行程式碼來看, 傳空字串也可以, 這邊我是傳 ``cnct'' 給  QKbdDriverFactory::create() 的第一個參數。

到了這裡便完成了所有的工作, QWSCnctKeyboardHandler class 便加入了。

\subsection{修改 makefile}
新加入的巨集, 程式檔案, 要 compile 到 QT/E library 中, 需要修改 Makefile
讓 compiler 將新加入的部份 compile 到 QT/E library。

原先的 Makefile 是以 \verb+./configure -embedded arm+ 產生的,
只要修改 \$QTDIR/src/Makefile 的部份內容即可。

%\lstset{morecomment=[l][\color{red}]{/*}{*/}}
\begin{lstlisting}[basicstyle=\footnotesize,frame=single,frameround=tttt,numbers=left,breaklines=true,caption=\$QTDIR/src/Makefile,label=makefile,escapeinside={/*@}{@*/}]
CXXFLAGS = /*@\label{CNCT}\textcolor{red}{-DQT\_{}QWS\_{}CNCT}@*/ -pipe -DQWS -fno-exceptions -fno-rtti -Wall -W -O2 -fPIC -DQT_SHARED -DQT_NO_DEBUG -DQT_NO_CUPS -DQT_NO_NIS -DQT_NO_IMAGEIO_MNG -DQT_NO_IMAGEIO_JPEG -DQT_NO_STYLE_MAC -DQT_NO_STYLE_AQUA -DQT_NO_STYLE_INTERLACE -DQT_NO_STYLE_WINDOWSXP -DQT_NO_STYLE_COMPACT -DQT_NO_QWS_VFB -DQT_NO_QWS_VNC -DQT_NO_QWS_VGA16 -DQT_NO_QWS_TRANSFORMED -DQT_NO_QWS_MACH64 -DQT_NO_QWS_VOODOO3 -DQT_NO_QWS_MATROX -DQT_NO_QWS_SHADOWFB -DQT_NO_QWS_REPEATER -DQT_NO_QWS_KBDUSB -DQT_NO_QWS_MOUSE_BUS

#/*@這是程式的原始碼所有檔案, 由於 qkbdcnct\_{}qws.cpp 是新增加的所以也要加入其中。@*/ 

SOURCES = .moc/release-shared-emb-arm/allmoc.cpp \
                kernel/qsound_qws.cpp \
                kernel/qsoundqss_qws.cpp \
                kernel/qapplication_qws.cpp \
		.
		.
		.
		.
                embedded/qkbdtty_qws.cpp \
                embedded/qkbdpc101_qws.cpp \
                /*@\colorbox{slight}{embedded/qkbdcnct\_{}qws.cpp $\backslash$ }@*/
                embedded/qmousepc_qws.cpp \
                tools/qconfig.cpp


#/*@這是程式的 obj 檔案, 由於 qkbdcnct\_{}qws.cpp 會產生 qkbdcnct\_{}qws.o 所以也要加入其中。@*/ 

OBJECTS = .obj/release-shared-emb-arm/allmoc.o \
                .obj/release-shared-emb-arm/qsound_qws.o \
                .obj/release-shared-emb-arm/qsoundqss_qws.o \
                .obj/release-shared-emb-arm/qapplication_qws.o \
                .obj/release-shared-emb-arm/qclipboard_qws.o \
                .obj/release-shared-emb-arm/qcolor_qws.o \
                .obj/release-shared-emb-arm/qcopchannel_qws.o \
                .obj/release-shared-emb-arm/qcursor_qws.o \
                .obj/release-shared-emb-arm/qdesktopwidget_qws.o \
                .obj/release-shared-emb-arm/qdirectpainter_qws.o \
		.
		.
		.
		.
                .obj/release-shared-emb-arm/qkbdtty_qws.o \
                .obj/release-shared-emb-arm/qkbdpc101_qws.o \
                /*@\colorbox{slight}{.obj/release-shared-emb-arm/qkbdcnct\_{}qws.o $\backslash$ } @*/
                .obj/release-shared-emb-arm/qmousepc_qws.o \
                .obj/release-shared-emb-arm/qconfig.o


#/*@這是程式的 moc 檔案, 由於 qkbdcnct\_{}qws.cpp 會產生 qkbdcnct\_{}qws.moc 所以也要加入其中。@*/ 

SRCMOC   = .moc/release-shared-emb-arm/qsoundqss_qws.moc \
                .moc/release-shared-emb-arm/qcopchannel_qws.moc \
                .moc/release-shared-emb-arm/qprocess_unix.moc \
                .moc/release-shared-emb-arm/qmovie.moc \
		.
		.
		.
		.
                .moc/release-shared-emb-arm/qkbd_qws.moc \
                .moc/release-shared-emb-arm/qkbdtty_qws.moc \
                /*@\colorbox{slight}{.moc/release-shared-emb-arm/qkbdcnct\_{}qws.moc $\backslash$ } @*/
                .moc/release-shared-emb-arm/qmousepc_qws.moc

#/*@這只是純粹的檔案相依性, 因為 qkbdtty\_{}qws.h 有存在, 所以我跟著加入@*/

.moc/release-shared-emb-arm/allmoc.cpp: /mypackages/qt-embedded-free-3.1.2/include/qt.h kernel/qsoundqss_qws.h \
                styles/qcompactstyle.h \
                kernel/qcopchannel_qws.h \
                kernel/qdirectpainter_qws.h \
                kernel/qfontfactorybdf_qws.h \
                kernel/qfontfactoryttf_qws.h \
		.
		.
		.
		.
		.
		.
                embedded/qkbdtty_qws.h \
                embedded/qkbdpc101_qws.h \
                /*@\colorbox{slight}{embedded/qkbdcnct\_{}qws.h $\backslash$ } @*/
                embedded/qmousepc_qws.h


#/*@這只是純粹的檔案相依性, 因為 qkbdtty\_{}qws.h 有存在, 所以我跟著加入@*/
.obj/release-shared-emb-arm/qkbddriverfactory_qws.o: embedded/qkbddriverfactory_qws.cpp embedded/qkbddriverinterface_p.h \
                embedded/qkbddriverfactory_qws.h \
                kernel/qapplication.h \
                embedded/qkbdtty_qws.h \
                /*@\colorbox{slight}{embedded/qkbdcnct\_{}qws.h $\backslash$ }@*/
                embedded/qkbdusb_qws.h \
                embedded/qkbdsl5000_qws.h \
                embedded/qkbdyopy_qws.h \
                embedded/qkbdvr41xx_qws.h \
                ../include/private/qpluginmanager_p.h \
                ../include/private/qcom_p.h \
		.
		.
		.
		.



#/*@這就是產生 .obj/release-shared-emb-arm/qkbdcnct\_{}qws.o 的 makefile 規則@*/
/|.obj/release-shared-emb-arm/qkbdcnct_qws.o: embedded/qkbdcnct_qws.cpp embedded/qkbdcnct_qws.h \|/
                kernel/qgfx_qws.h \
                kernel/qwindowsystem_qws.h \
                kernel/qnamespace.h \
                kernel/qapplication.h \
                embedded/qkbd_qws.h \
                kernel/qdesktopwidget.h \
                tools/qasciidict.h \
                kernel/qpalette.h \
                kernel/qtranslator.h \
                tools/qstrlist.h \
                tools/qstringlist.h \
                kernel/qwidget.h \
                kernel/qwindowdefs.h \
                kernel/qobject.h \
                kernel/qpaintdevice.h \
                kernel/qfont.h \
		.
		.
		.
		.
                kernel/qwsutils_qws.h\
                /|.moc/release-shared-emb-arm/qkbdcnct_qws.moc|/
        /|$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/release-shared-emb-arm/qkbdcnct_qws.o embedded/qkbdcnct_qws.cpp|/




#/*@這就是產生 .moc/release-shared-emb-arm/qkbdcnct\_{}qws.moc 的 makefile 規則@*/
/|.moc/release-shared-emb-arm/qkbdcnct_qws.moc: $(MOC) embedded/qkbdcnct_qws.cpp|/
        /|$(MOC) embedded/qkbdcnct_qws.cpp -o .moc/release-shared-emb-arm/qkbdcnct_qws.moc|/

#/*@這是做一些複製檔案的動作, 因為 qkbdtty\_{}qws.h 有存在, 所以我跟著加入@*/
install_headers:
        @$(CHK_DIR_EXISTS) "$(INSTALL_ROOT)../include/" || $(MKDIR) "$(INSTALL_ROOT)../include/"
        -$(COPY_FILE) "../include/jri.h" "$(INSTALL_ROOT)../include"
        -$(COPY_FILE) "../include/jri_md.h" "$(INSTALL_ROOT)../include"
	.
	.
	.
	.
	.
        -$(COPY_FILE) "../include/qkbdpc101_qws.h" "$(INSTALL_ROOT)../include"
        /|-$(COPY_FILE) "../include/qkbdcnct_qws.h" "$(INSTALL_ROOT)../include"|/
        -$(COPY_FILE) "../include/qkbdsl5000_qws.h" "$(INSTALL_ROOT)../include"
        -$(COPY_FILE) "../include/qkbdtty_qws.h" "$(INSTALL_ROOT)../include"
	.
	.
	.


#/*@處理檔案的 makefile 規則, 因為 qkbdtty\_{}qws.h 有存在, 所以我跟著加入@*/
uninstall_headers:
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/jri.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/jri_md.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/jritypes.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/npapi.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/npupp.h"
	.
	.
	.
	.
	.
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbd_qws.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbddriverfactory_qws.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbddriverplugin_qws.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbdpc101_qws.h"
        /|-$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbdcnct_qws.h"|/
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbdsl5000_qws.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbdtty_qws.h"
        -$(DEL_FILE) -r "$(INSTALL_ROOT)../include/qkbdusb_qws.h"
	.
	.
	.
	.


\end{lstlisting}

Listing \ref{makefile} (page \pageref{makefile}) 列出有關需要修改的部份,
這部份不是連續下來的而是分散在
\$QTDIR/src/Makefile 不同地方。

第 \ref{CNCT} 行加入 -DQT\_{}QWS\_{}CNCT 以便將有 \verb+#ifdef QT_QWS_CNCT+
這樣的敘述 compile 到 QT/E library。

而如何找出要加入那些有關 Makefile 的命令呢？
我是參考 qkbdtty\_{}qws.h, qkbdtty\_{}qws.cpp, qkbdpc101\_{}qws.h, qkbdpc101\_{}qws.cpp 在 Makefile
的寫法依樣畫葫蘆的完成 qkbdcnct\_{}qws.h, qkbdcnct\_{}qws.cpp。

\section{加入新的 keyboard handler class 流程}

圖 \ref{flowchart}, page \pageref{flowchart}
為在 QT/E 3.1.2 加入新的 keyboard handler class 流程：

\begin{figure}[htbp]
\center
\includegraphics[width=\textwidth]{eps/flowchart.eps}
\caption{加入新 keyboard handler class 的流程圖}\label{flowchart}
\end{figure}

\begin{comment}
\bigskip
\newpage

\begin{center}
\begin{tabular}{|l|}
\hline
編寫一個新的 keyboard handler class\\
\hline
\end{tabular}

\medskip
\hspace{\textwidth}$\downarrow$
\medskip

\begin{tabular}{|p{8cm}|}
\hline
產生這個新的 keyboard handler class。\\
藉由修改 \$QTDIR/src/embedded/qkbddriverfactory\_{}qws.cpp 的\\
QWSKeyboardHandler *QKbdDriverFactory::create( const QString\& key, const QString\& device )\\
\hline
\end{tabular}

\medskip
\hspace{\textwidth}$\downarrow$
\medskip

\begin{tabular}{|p{8cm}|}
\hline
修改 void QWSServer::openKeyboard() (在 \$QTDIR/src/src/kernel/qwindowsystem\_{}qws.cpp)\\
將需要的參數,傳給 QWSKeyboardHandler *QKbdDriverFactory::create( const QString\& key, const QString\& device )\\
\hline
\end{tabular}

\medskip
\hspace{\textwidth}$\downarrow$
\medskip

\begin{tabular}{|l|}
\hline
修改 \$QTDIR/src/Makefile\\
\hline
\end{tabular}
\end{center}
\end{comment}

